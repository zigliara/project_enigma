# Project Enigma - Python 2.7.10# Emulate the Enigma Machineimport sys"""Based on info from:1. http://www.matematiksider.dk/enigma_eng.html2. https://en.wikipedia.org/wiki/Enigma_rotor_detailsConstraints:Emulates the Enigma M4 (1942) (Rotors I, II and III and Reflector ETW)according to link 2Handles 26 capital letters.Wheel N will rotate 1/26 each time a new character is entered.Implementation of double-stepping will not be implemented at first.The plugboard will be simulated but not used.Spaces will be removed from the input strings.""""""Configuration:Wheel N (Rotor I) configuration:EKMFLGDQVZNTOWYHXUSPAIBRCJTurn-over notch position: 'Q'Wheel M (Rotor II) configuration:AJDKSIRUXBLHWTMCQGZNPYFVOETurn-over notch position: 'E'Wheel L (Rotor III) configuration:BDFHJLCPRTXVZNYEIWGAKMUSQOTurn-over notch position: 'V'Wheel K (Rotor Beta) configuration:LEYJVCNIXWPBQMDRTAKZGFUHOSReflector B-thin configuration:ENKQAUYWJICOPBLMDXZVFTHRGS"""class Rotor(object):    my_rotor = []    def __init__(self, my_wheel):        self.my_wheel = my_wheel         # my_type defines if the wheel is a rotor or a reflector        # If it's a rotor, the correct notch position shall be automatically set        alphabet = [chr(i) for i in range(65, 91)]        if my_wheel == 1:            rotor_config = ['E', 'K', 'M', 'F', 'L', 'G', 'D', 'Q', 'V', 'Z', 'N', 'T', 'O', 'W', 'Y', 'H', 'X', 'U', 'S', 'P', 'A', 'I', 'B', 'R', 'C', 'J']            self.my_notch = 'Q'        elif my_wheel == 2:            rotor_config = ['A', 'J', 'D', 'K', 'S', 'I', 'R', 'U', 'X', 'B', 'L', 'H', 'W', 'T', 'M', 'C', 'Q', 'G', 'Z', 'N', 'P', 'Y', 'F', 'V', 'O', 'E']            self.my_notch = 'E'        elif my_wheel == 3:            rotor_config = ['B', 'D', 'F', 'H', 'J', 'L', 'C', 'P', 'R', 'T', 'X', 'V', 'Z', 'N', 'Y', 'E', 'I', 'W', 'G', 'A', 'K', 'M', 'U', 'S', 'Q', 'O']            self.my_notch = 'V'        elif my_wheel == 4:            rotor_config = ['L', 'E', 'Y', 'J', 'V', 'C', 'N', 'I', 'X', 'W', 'P', 'B', 'Q', 'M', 'D', 'R', 'T', 'A', 'K', 'Z', 'G', 'F', 'U', 'H', 'O', 'S']            self.my_notch = ''        else:            rotor_config = ['E', 'N', 'K', 'Q', 'A', 'U', 'Y', 'W', 'J', 'I', 'C', 'O', 'P', 'B', 'L', 'M', 'D', 'X', 'Z', 'V', 'F', 'T', 'H', 'R', 'G', 'S']            self.my_notch = ''                self.my_rotor = zip(alphabet, rotor_config)# Get Enigma configuration from the userdef get_conf():    pos_one = 0    pos_two = 0    pos_three = 0    pos_four = 0    alphabet = [chr(i) for i in range(65, 91)]    while True:        wheel_n = raw_input('Which letter shall the N-wheel be set to? ')        if wheel_n.upper() in alphabet:            pos_one = alphabet.index(wheel_n.upper())        wheel_m = raw_input('Which letter shall the M-wheel be set to? ')        if wheel_m.upper() in alphabet:            pos_two = alphabet.index(wheel_m.upper())        wheel_l = raw_input('Which letter shall the L-wheel be set to? ')        if wheel_l.upper() in alphabet:            pos_three = alphabet.index(wheel_l.upper())        wheel_k = raw_input('Which letter shall the K-wheel be set to? ')        if wheel_k.upper() in alphabet:            pos_four = alphabet.index(wheel_k.upper())        return pos_one, pos_two, pos_three, pos_four# Introductiondef intro_enigma():    print 'Welcome to the Enigma emulator!'    print 'You will be asked to enter the Enigma-configuration, as well as the text you want encrypted'    while True:        answer = raw_input('Do you wish to continue or terminate the application? [continue/abort] ')        if answer.lower() == 'continue' or answer.lower() == 'c':            return True        elif answer.lower() == 'abort' or answer.lower() == 'a':            print 'Auf wiedersehen.'            sys.exit(1)        else:            print 'Please answer with \'continue\' or \'abort\'.'# Set the rotors to their start positiondef set_to_start(start_index, rotor):    for i in range(len(rotor.my_rotor)):        if i + start_index < len(rotor.my_rotor):            rotor.my_rotor[i] = rotor.my_rotor[i+start_index]        else:            rotor.my_rotor[i] = rotor.my_rotor[(i+start_index) % len(rotor.my_rotor)]    print rotor.my_rotor, start_index    return rotor# Main functiondef main():    if intro_enigma(): # If the user wants to proceed                # Create the wheels        rotor1 = Rotor(my_wheel = 1)        rotor2 = Rotor(my_wheel = 2)        rotor3 = Rotor(my_wheel = 3)        rotor4 = Rotor(my_wheel = 4)        reflector = Rotor(my_wheel = 5)                # Get the start-configuration from the user        pos_one, pos_two, pos_three, pos_four = get_conf()        set_to_start(pos_one, rotor1)        set_to_start(pos_two, rotor2)# Init functionif __name__ == '__main__':    main()"""Additional rotors available to the M4:Rotor IV configuration:ESOVPZJAYQUIRHXLNFTGKDCMWBTurn-over notch position: 'J'Rotor V configuration:VZBRGITYUPSDNHLXAWMJQOFECKTurn-over notch position: 'Z'Rotor VI configuration:JPGVOUMFYQBENHZRDKASXLICTWTurn-over notch positions: 'Z' and 'M'Rotor VII configuration:NZJHGRCXMYSWBOUFAIVLPEKQDTTurn-over notch positions: 'Z' and 'M'Rotor VIII configuration:FKQHTLXOCBJSPDZRAMEWNIUYGVTurn-over notch positions: 'Z' and 'M'Rotor Gamma configuration:FSOKANUERHMBTIYCWLQPZXVGJDAdditional reflector available to the M4:Reflector C-thin:RDOBJNTKVEHMLFCWZAXGYIPSUQ"""