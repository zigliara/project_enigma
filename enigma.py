# Project Enigma - Python 2.7.10# Emulate the Enigma Machineimport sys"""Based on info from:http://www.matematiksider.dk/enigma_eng.htmlConstraints:Handles 26 capital letters.Wheel N will rotate 1/26 each time a new character is entered.Implementation of double-stepping will not be implemented at first.The plugboard will be simulated but not used.Spaces will be removed from the input strings."""# Emulate Plugboard# Emulate Wheel N (1st wheel)# Emulate Wheel M (2nd wheel)# Emulate Wheel L (3rd wheel)# Emulate Reflector# Get Enigma configuration from the userdef get_conf(alphabet):    while True:        wheel_n = raw_input('Which letter shall the N-wheel by set to?')        if wheel_n.upper() in alphabet.keys():            print 'N-key found'        wheel_m = raw_input('Which letter shall the M-wheel by set to?')        if wheel_m.upper() in alphabet.keys():            print 'M-key found'        wheel_l = raw_input('Which letter shall the L-wheel by set to?')        if wheel_l.upper() in alphabet.keys():            print 'L-key found'        break# Introductiondef intro_enigma():    print 'Welcome to the Enigma emulator!'    print 'You will be asked to enter the Enigma-configuration, as well as the text you want encrypted'    while True:        answer = raw_input('Do you wish to continue or terminate the application? [continue/abort]')        if answer.lower() == 'continue' or answer.lower() == 'c':            return True        elif answer.lower() == 'abort' or answer.lower() == 'a':            print 'Auf wiedersehen.'            sys.exit(1)        else:            print 'Please answer with \'continue\' or \'abort\'.'# Main functiondef main():    if intro_enigma(): # If the user wants to proceed                # Create a dictionary where keys = values = Capital letters        # Based upon the ASCII-values for the letters        alphabet = {}        for i in range(65, 91):            alphabet[chr(i)] = chr(i)        print alphabet                # Get the configuration from the user        get_conf(alphabet)        # Init functionif __name__ == '__main__':    main()